import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FaArrowLeft, FaDownload, FaUserPlus } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import { Dialog, Transition } from '@headlessui/react';
import { Fragment } from 'react';

export default function RapportAudit() {
  const [reports, setReports] = useState([]);
  const [users, setUsers] = useState([]);
  const [selectedUsers, setSelectedUsers] = useState([]);
  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);
  const [currentReportId, setCurrentReportId] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        // Mock data for development
        const mockUsers = [
          { id: 1, name: 'Admin User', email: 'admin@example.com' },
          { id: 2, name: 'Test User', email: 'test@example.com' }
        ];
        
        const mockReports = [
          {
            id: 'AUD_001',
            title: 'Rapport Test 1',
            date: new Date().toISOString(),
            status: 'En cours',
            assigned_users: [1]
          }
        ];

        try {
          const [reportsResponse, usersResponse] = await Promise.all([
            fetch('http://localhost:5178/audit-reports'),
            fetch('http://localhost:5178/users')
          ]);
          
          if (!reportsResponse.ok || !usersResponse.ok) {
            throw new Error('Erreur lors de la r√©cup√©ration des donn√©es');
          }
          
          const reportsData = await reportsResponse.json();
          const usersData = await usersResponse.json();
          
          setReports(reportsData);
          setUsers(usersData);
        } catch (error) {
          console.warn('Using mock data due to backend unavailability:', error);
          setReports(mockReports);
          setUsers(mockUsers);
        }
      } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la r√©cup√©ration des donn√©es');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleAssignUsers = (reportId) => {
    setCurrentReportId(reportId);
    const report = reports.find(r => r.id === reportId);
    setSelectedUsers(report?.assigned_users || []);
    setIsAssignModalOpen(true);
  };

  const handleAssignSubmit = async () => {
    try {
      try {
        const response = await fetch(`http://localhost:5178/audit-reports/${currentReportId}/assign-users`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userIds: selectedUsers })
        });

        if (!response.ok) {
          throw new Error('Erreur lors de l\'assignation des utilisateurs');
        }
      } catch (error) {
        console.warn('Backend unavailable, updating UI only:', error);
      }

      // Mettre √† jour la liste des rapports
      const updatedReports = reports.map(report => {
        if (report.id === currentReportId) {
          return { ...report, assigned_users: selectedUsers };
        }
        return report;
      });
      setReports(updatedReports);

      setIsAssignModalOpen(false);
      setSelectedUsers([]);
      alert('Utilisateurs assign√©s avec succ√®s');
    } catch (error) {
      console.error('Erreur:', error);
      alert('Erreur lors de l\'assignation des utilisateurs');
    }
  };

  const handleGenerateReport = async () => {
    try {
      const now = new Date();
      const dateStr = now.toLocaleString();
      
      // Pr√©paration des donn√©es pour le rapport
      const missingServices = reports.filter(row => row.services_manquants);
      const erreurGlobale = missingServices.length > 0 
        ? `D√©tect√© ${missingServices.length} service(s) manquant(s)`
        : "Aucun service manquant d√©tect√©.";

      // Construction du tableau pour le fichier texte
      const col1 = 'Pays';
      const col2 = 'Op√©rateur';
      const col3 = 'Services Manquants';
      const width1 = Math.max(col1.length, ...reports.map(r => (r.pays || '').length));
      const width2 = Math.max(col2.length, ...reports.map(r => (r.operateur || '').length));
      const width3 = Math.max(col3.length, ...reports.map(r => (r.services_manquants || '').length));

      const pad = (txt, len) => (txt || '').padEnd(len, ' ');
      const sep = `| ${pad(col1, width1)} | ${pad(col2, width2)} | ${pad(col3, width3)} |\n`;
      const sepLine = `|-${'-'.repeat(width1)}-|-${'-'.repeat(width2)}-|-${'-'.repeat(width3)}-|\n`;
      let table = sep + sepLine;

      reports.forEach(row => {
        table += `| ${pad(row.pays, width1)} | ${pad(row.operateur, width2)} | ${pad(row.services_manquants, width3)} |\n`;
      });

      const aide = `\n\n\nüî¥ Services manquants d√©tect√©s
Cause probable :
- Services non activ√©s dans le syst√®me
- Donn√©es manquantes dans la base
- Configuration incompl√®te

Solutions :
- V√©rifier l'activation des services dans le syst√®me
- Compl√©ter les donn√©es manquantes
- Mettre √† jour la configuration des services
- V√©rifier les accords de roaming avec les op√©rateurs
`;

      const txt = `Nom du test : Partenaires Roaming & Services\n` +
                  `Date : ${dateStr}\n` +
                  `Erreur globale : ${erreurGlobale}\n\n` +
                  table + aide;

      // Cr√©ation et t√©l√©chargement du fichier
      const blob = new Blob([txt], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `rapport_partenaires_roaming_${now.toISOString().slice(0,19).replace(/[:T]/g, "-")}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      // Pr√©paration des donn√©es pour la sauvegarde dans la base de donn√©es
      const simplifiedData = reports.map(row => ({
        pays: row.pays,
        operateur: row.operateur,
        services_manquants: row.services_manquants
      }));

      const reportData = {
        id: `AUD_${Date.now()}`,
        test_id: 1,
        title: `Rapport Partenaires Roaming - ${now.toLocaleDateString()}`,
        date: now.toISOString().split('T')[0],
        time: now.toTimeString().split(' ')[0],
        status: 'En cours',
        created_by: 'Syst√®me',
        validated_by: null,
        total_operators: reports.length,
        total_issues: missingServices.length,
        camel_issues: 0,
        gprs_issues: 0,
        threeg_issues: 0,
        lte_issues: 0,
        results_data: JSON.stringify(simplifiedData),
        solutions: JSON.stringify([
          "V√©rifier l'activation des services dans le syst√®me",
          "Compl√©ter les donn√©es manquantes",
          "Mettre √† jour la configuration des services",
          "V√©rifier les accords de roaming avec les op√©rateurs"
        ]),
        attachments: JSON.stringify([]),
        validation_notes: erreurGlobale,
        implemented_changes: null,
        assigned_users: JSON.stringify([])
      };

      try {
        // Sauvegarde dans la base de donn√©es
        const response = await fetch('http://localhost:5178/audit-reports', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(reportData)
        });

        if (!response.ok) {
          throw new Error('Erreur lors de la sauvegarde du rapport');
        }
      } catch (error) {
        console.warn('Backend unavailable, report generated but not saved:', error);
      }

      alert('Rapport g√©n√©r√© avec succ√®s !');

    } catch (error) {
      console.error("Erreur lors de la g√©n√©ration du rapport:", error);
      alert("Une erreur est survenue lors de la g√©n√©ration du rapport.");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="p-6 max-w-7xl mx-auto"
    >
      <div className="flex justify-between items-center mb-6">
        <button
          onClick={() => navigate('/roaming-tests')}
          className="flex items-center space-x-2 text-gray-600 hover:text-gray-800 transition-colors"
        >
          <FaArrowLeft />
          <span>Retour aux tests</span>
        </button>

        <div className="text-right">
          <button
            onClick={handleGenerateReport}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2"
          >
            <FaDownload />
            <span>G√©n√©rer un rapport</span>
          </button>
        </div>
      </div>

      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 text-center mb-2">
          Rapports d'Audit
        </h1>
        <p className="text-gray-600 text-center">
          G√©rez vos rapports d'audit et assignez des utilisateurs
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Titre</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Utilisateurs Assign√©s</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {reports.map((report) => (
                <tr key={report.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{report.id}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{report.title}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(report.date).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{report.status}</td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {report.assigned_users?.length > 0 
                      ? report.assigned_users.map(userId => {
                          const user = users.find(u => u.id === userId);
                          return user ? user.name : '';
                        }).join(', ')
                      : 'Aucun utilisateur assign√©'}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button
                      onClick={() => handleAssignUsers(report.id)}
                      className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
                    >
                      <FaUserPlus />
                      <span>Assigner</span>
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Modal d'assignation des utilisateurs */}
      <Transition appear show={isAssignModalOpen} as={Fragment}>
        <Dialog
          as="div"
          className="fixed inset-0 z-10 overflow-y-auto"
          onClose={() => setIsAssignModalOpen(false)}
        >
          <div className="min-h-screen px-4 text-center">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <Dialog.Overlay className="fixed inset-0 bg-black opacity-30" />
            </Transition.Child>

            <span
              className="inline-block h-screen align-middle"
              aria-hidden="true"
            >
              &#8203;
            </span>

            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <div className="inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl">
                <Dialog.Title
                  as="h3"
                  className="text-lg font-medium leading-6 text-gray-900"
                >
                  Assigner des utilisateurs
                </Dialog.Title>

                <div className="mt-4">
                  <div className="space-y-4">
                    {users.map((user) => (
                      <div key={user.id} className="flex items-center">
                        <input
                          type="checkbox"
                          id={`user-${user.id}`}
                          checked={selectedUsers.includes(user.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedUsers([...selectedUsers, user.id]);
                            } else {
                              setSelectedUsers(selectedUsers.filter(id => id !== user.id));
                            }
                          }}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <label
                          htmlFor={`user-${user.id}`}
                          className="ml-2 block text-sm text-gray-900"
                        >
                          {user.name} ({user.email})
                        </label>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    className="inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-transparent rounded-md hover:bg-gray-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-gray-500"
                    onClick={() => setIsAssignModalOpen(false)}
                  >
                    Annuler
                  </button>
                  <button
                    type="button"
                    className="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500"
                    onClick={handleAssignSubmit}
                  >
                    Assigner
                  </button>
                </div>
              </div>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition>
    </motion.div>
  );
}

export const generateReportFromTest = async (data, testType) => {
  try {
    const now = new Date();
    const dateStr = now.toLocaleString();
    
    // Pr√©paration des donn√©es pour le rapport
    const erreurs = data.filter(row => row.commentaires && row.commentaires.toLowerCase().includes("erreur"));
    const erreurGlobale = erreurs.length > 0 ? erreurs[0].commentaires : "Aucune erreur majeure d√©tect√©e.";

    // Construction du tableau pour le fichier texte
    const col1 = 'Pays';
    const col2 = 'Op√©rateur';
    const col3 = 'Commentaire';
    const width1 = Math.max(col1.length, ...data.map(r => (r.pays || '').length));
    const width2 = Math.max(col2.length, ...data.map(r => (r.operateur || '').length));
    const width3 = Math.max(col3.length, ...data.map(r => (r.commentaires || '').length));

    const pad = (txt, len) => (txt || '').padEnd(len, ' ');
    const sep = `| ${pad(col1, width1)} | ${pad(col2, width2)} | ${pad(col3, width3)} |\n`;
    const sepLine = `|-${'-'.repeat(width1)}-|-${'-'.repeat(width2)}-|-${'-'.repeat(width3)}-|\n`;
    let table = sep + sepLine;

    data.forEach(row => {
      table += `| ${pad(row.pays, width1)} | ${pad(row.operateur, width2)} | ${pad(row.commentaires, width3)} |\n`;
    });

    const aide = `\n\n\nüî¥ Commentaire : "V√©rifie l'importation de l'IR21 ou l'IR85"
Cause probable :
L'extraction de l'IR21 a √©chou√© (fichier manquant, mal structur√©, ou mauvaise URL).

Solutions :
- V√©rifie si le fichier IR.21 est bien import√© et lisible dans ton application.
- Assure-toi que le format XML du fichier respecte bien la norme IR.21.
- Si tu utilises une API ou un syst√®me d'import, v√©rifie que le fichier IR.85 est √©galement √† jour.
- V√©rifie le nom du fichier et sa localisation.
- S'assurer que les balises n√©cessaires sont bien pr√©sentes.

üî¥ Commentaire : "Impossible de faire l'extraction MCC/MNC"
Cause probable :
Les champs MCC ou MNC sont manquants ou mal format√©s.

Solutions :
- V√©rifie que la PLMN est bien renseign√©e sous la forme MCC+MNC.
- Si la base de donn√©es contient une valeur comme mnc001, mcc208, extrais correctement les chiffres.
- Si l'information n'est pas pr√©sente dans l'IR21, cherche-la manuellement.
- Met en place une r√®gle de validation en amont.

üü° Commentaire : "Extraction IR21 r√©ussie, erreur dans la v√©rification HSS (APN)"
Cause probable :
Les donn√©es APN extraites de l'IR21 ne correspondent pas √† celles pr√©sentes dans le HSS.

Solutions :
- V√©rifie que l'APN d√©clar√© dans l'IR21 correspond bien √† celui provisionn√©.
- Assure-toi que l'APN est bien activ√© pour le roaming.
- Contr√¥le la casse et les caract√®res sp√©ciaux.
- Mets en place une table de correspondance APN IR21 <-> APN HSS.
`;

    const txt = `Nom du test : ${testType}\n` +
                `Date : ${dateStr}\n` +
                `Erreur globale : ${erreurGlobale}\n\n` +
                table + aide;

    // Cr√©ation et t√©l√©chargement du fichier
    const blob = new Blob([txt], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `rapport_${testType.toLowerCase().replace(/\s+/g, '_')}_${now.toISOString().slice(0,19).replace(/[:T]/g, "-")}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Pr√©paration des donn√©es pour la sauvegarde dans la base de donn√©es
    const simplifiedData = data.map(row => ({
      pays: row.pays,
      operateur: row.operateur,
      commentaires: row.commentaires
    }));

    const reportData = {
      id: `AUD_${Date.now()}`,
      test_id: testType === 'Outbound Roaming' ? 3 : 1,
      title: `Rapport ${testType} - ${now.toLocaleDateString()}`,
      date: now.toISOString().split('T')[0],
      time: now.toTimeString().split(' ')[0],
      status: 'En cours',
      created_by: 'Syst√®me',
      validated_by: null,
      total_operators: data.length,
      total_issues: erreurs.length,
      camel_issues: data.filter(row => row.commentaires && row.commentaires.toLowerCase().includes('camel')).length,
      gprs_issues: data.filter(row => row.commentaires && row.commentaires.toLowerCase().includes('gprs')).length,
      threeg_issues: data.filter(row => row.commentaires && row.commentaires.toLowerCase().includes('3g')).length,
      lte_issues: data.filter(row => row.commentaires && row.commentaires.toLowerCase().includes('lte')).length,
      results_data: JSON.stringify(simplifiedData),
      solutions: JSON.stringify([
        "V√©rifier l'importation des fichiers IR21/IR85",
        "Valider le format XML des fichiers",
        "V√©rifier l'extraction MCC/MNC",
        "Contr√¥ler la correspondance des APN entre IR21 et HSS"
      ]),
      attachments: JSON.stringify([]),
      validation_notes: erreurGlobale,
      implemented_changes: null,
      assigned_users: JSON.stringify([])
    };

    // Sauvegarde dans la base de donn√©es
    const response = await fetch('http://localhost:5178/audit-reports', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(reportData)
    });

    if (!response.ok) {
      throw new Error('Erreur lors de la sauvegarde du rapport');
    }

    alert('Rapport g√©n√©r√© et sauvegard√© avec succ√®s !');

  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration du rapport:", error);
    alert("Une erreur est survenue lors de la g√©n√©ration du rapport.");
  }
}; 